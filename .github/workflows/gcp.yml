# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build and deploy a docker container to google cloud registry (gcr)

on:
  workflow_dispatch: {}
  push:
    branches: [ master, jib-fix ]

jobs:
  build:
    # Allow the job to fetch a GitHub ID token
    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Authenticate with GCP
        id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDED }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Setup gcloud environment
        uses: google-github-actions/setup-gcloud@v2

      - run: gcloud info

      - name: Setup docker
        run: gcloud auth configure-docker

      - name: Setup node 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Apply maven-cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Apply npm-cache
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Kotlin Linter
        run: mvn antrun:run@ktlint --non-recursive

      - name: Build and Deploy
        run: mvn -B -T 2 verify jib:build --file pom.xml
