# Use the official maven/Java 8 image to create a build artifact.
# https://hub.docker.com/_/maven
FROM maven:3.6.3-openjdk-8-slim as builder-backend

# Copy local code to the container image.
WORKDIR .
COPY pom.xml .
RUN mvn dependency:go-offline -B

COPY src ./src

# Build a release artifact.
RUN mvn verify -DskipTests

##############
FROM node:alpine3.11 as builder-frontend

# Create an application directory
RUN mkdir -p /app

# The /app directory should act as the main application directory
WORKDIR /app

# Copy the app package and package-lock.json file
COPY package*.json .
COPY webpack.config.js .

# Install node packages
RUN npm ci

# Copy or project directory (locally) in the current directory of our docker image (/app)
COPY src/main/react src/main/react

# Build the app
RUN npm run build


##########
#######
####

# Use AdoptOpenJDK for base image.
# It's important to use OpenJDK 8u191 or above that has container support enabled.
# https://hub.docker.com/r/adoptopenjdk/openjdk8
# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds
FROM adoptopenjdk/openjdk8:jdk8u262-b10-alpine-slim

# Copy the jar to the production image from the builder stage.
COPY --from=builder-backend /target/teambalance-*.jar /teambalance.jar


RUN mkdir -p /app
WORKDIR /app

COPY package*.json .

npm ci --only-production

# Copy the jar to the production image from the builder stage.
COPY --from=builder-frontend /app/src/main/webapp/ src/main/webapp

# Run the web service on container startup.
CMD ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/teambalance.jar"]
